name: Deploy Changed Challenges

on:
  push:
    branches: [main]
    paths:
      - 'challenges/**'
      - 'shared/**'
  workflow_dispatch:
    inputs:
      challenges:
        description: 'Challenges to deploy (comma-separated: 1,2,3 or "all")'
        required: true
        default: 'all'
        type: string

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      challenges: ${{ steps.changes.outputs.challenges }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get full history for better diff detection
      
      - name: Detect changed challenges
        id: changes
        run: |
          # Manual trigger with specific challenges
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            INPUT="${{ github.event.inputs.challenges }}"
            
            if [ "$INPUT" = "all" ]; then
              CHALLENGES="[1,2,3,4,5]"
            else
              # Convert "1,2,3" to [1,2,3]
              CHALLENGES=$(echo "$INPUT" | jq -R 'split(",") | map(tonumber)')
            fi
            
            echo "challenges=$CHALLENGES" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "üìã Manual deployment requested for: $INPUT"
            exit 0
          fi
          
          # Auto-detect changes from push
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # First push to branch
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          else
            # Normal push
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Extract challenge numbers from changed paths
          CHANGED_CHALLENGES=$(echo "$CHANGED_FILES" | \
            grep -oP 'challenges/challenge-\K[0-9]+' | \
            sort -u | \
            jq -R . | jq -s . | jq -c .)
          
          # Check if shared code changed
          SHARED_CHANGED=$(echo "$CHANGED_FILES" | grep -c "^shared/" || true)
          
          if [ "$SHARED_CHANGED" -gt 0 ]; then
            echo "üîÑ Shared code changed - deploying all challenges"
            CHANGED_CHALLENGES="[1,2,3,4,5]"
          fi
          
          # Check if we have any challenges to deploy
          if [ "$CHANGED_CHALLENGES" = "[]" ] || [ -z "$CHANGED_CHALLENGES" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No challenge changes detected"
          else
            echo "challenges=$CHANGED_CHALLENGES" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Deploying challenges: $CHANGED_CHALLENGES"
          fi

  validate:
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        challenge: ${{ fromJson(needs.detect-changes.outputs.challenges) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Validate JavaScript syntax
        run: |
          echo "üîç Validating Challenge ${{ matrix.challenge }}..."
          
          if [ ! -d "challenges/challenge-${{ matrix.challenge }}" ]; then
            echo "‚ùå Challenge ${{ matrix.challenge }} directory not found"
            exit 1
          fi
          
          # Check all JS files
          find challenges/challenge-${{ matrix.challenge }}/src -name "*.js" -exec node --check {} \;
          
          echo "‚úÖ Challenge ${{ matrix.challenge }} syntax valid"

  deploy:
    needs: [detect-changes, validate]
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        challenge: ${{ fromJson(needs.detect-changes.outputs.challenges) }}
      fail-fast: false  # Continue deploying other challenges even if one fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install clasp
        run: npm install -g @google/clasp
      
      - name: Configure clasp credentials
        run: |
          mkdir -p ~/.config/@google
          echo "$CLASP_TOKEN" > ~/.clasprc.json

          # Debug: Check if token was written correctly (without exposing actual token)
          if [ ! -f ~/.clasprc.json ]; then
            echo "‚ùå Failed to create .clasprc.json"
            exit 1
          fi

          # Verify JSON structure
          if ! jq empty ~/.clasprc.json 2>/dev/null; then
            echo "‚ùå .clasprc.json is not valid JSON"
            exit 1
          fi

          echo "‚úÖ clasp credentials configured"
        env:
          CLASP_TOKEN: ${{ secrets.CLASP_TOKEN }}
      
      - name: Prepare shared utilities
        run: |
          echo "üì¶ Copying shared utilities to Challenge ${{ matrix.challenge }}..."
          
          # Create temp directory for shared code
          mkdir -p challenges/challenge-${{ matrix.challenge }}/src/shared
          
          # Copy shared utilities
          if [ -d "shared/utils" ]; then
            cp -r shared/utils/* challenges/challenge-${{ matrix.challenge }}/src/shared/ 2>/dev/null || true
          fi
          
          echo "‚úÖ Shared utilities copied"
      
      - name: Deploy Challenge ${{ matrix.challenge }}
        working-directory: challenges/challenge-${{ matrix.challenge }}
        run: |
          echo "üöÄ Deploying Challenge ${{ matrix.challenge }}..."
          
          # Verify .clasp.json exists
          if [ ! -f ".clasp.json" ]; then
            echo "‚ùå .clasp.json not found for Challenge ${{ matrix.challenge }}"
            exit 1
          fi
          
          # Check if scriptId is set
          SCRIPT_ID=$(grep -o '"scriptId"[[:space:]]*:[[:space:]]*"[^"]*"' .clasp.json | sed 's/.*"\([^"]*\)"$/\1/' || echo "")
          if [ -z "$SCRIPT_ID" ] || [ "$SCRIPT_ID" = "scriptId" ]; then
            echo "‚ùå scriptId not set in .clasp.json for Challenge ${{ matrix.challenge }}"
            echo "Please run 'clasp create' locally first"
            cat .clasp.json
            exit 1
          fi

          echo "‚úÖ Found Script ID: $SCRIPT_ID"
          
          # Push code to Apps Script
          clasp push -f
          
          # Create new deployment
          DEPLOY_OUTPUT=$(clasp deploy --description "Challenge ${{ matrix.challenge }} - Auto deploy ${{ github.sha }}")
          echo "$DEPLOY_OUTPUT"
          
          # Extract deployment ID
          DEPLOYMENT_ID=$(echo "$DEPLOY_OUTPUT" | grep -oP '(?<=- )[^ ]+' | head -1)
          
          if [ -n "$DEPLOYMENT_ID" ]; then
            echo "‚úÖ Challenge ${{ matrix.challenge }} deployed successfully"
            echo "üìù Deployment ID: $DEPLOYMENT_ID"
          else
            echo "‚ö†Ô∏è Deployment may have succeeded but couldn't extract ID"
          fi
      
      - name: Create deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ‚úÖ Challenge ${{ matrix.challenge }} - Deployed Successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Challenge ${{ matrix.challenge }} - Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for details" >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    needs: [detect-changes, deploy]
    if: always() && needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Create final summary
        run: |
          echo "## üéØ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed Challenges**: ${{ needs.detect-changes.outputs.challenges }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View full details in the workflow run above ‚¨ÜÔ∏è" >> $GITHUB_STEP_SUMMARY
      
      - name: Comment on commit
        if: github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          script: |
            const challenges = ${{ needs.detect-changes.outputs.challenges }};
            const status = '${{ needs.deploy.result }}';
            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `${emoji} Deployed challenges: ${challenges.join(', ')}\nStatus: ${status}`
            })